
function getAuthToken($form) {
  var authToken  = '';
  var $children = $form.children();

  $children.each(function(index, element) {
	name = $(this).attr('name');
	if (name === 'authenticity_token') {
	 authToken = $(this).attr('value');
	}
  });

  return authToken;
}

function encodeYoutubeVideoId(authToken, youtubeId) {
  var urlEncodedData = '';
  var urlEncodedPairs = [];

  urlEncodedPairs.push(encodeURIComponent('authenticity_token') + '=' + encodeURIComponent(authToken));
  urlEncodedPairs.push(encodeURIComponent('video[youtube_id]') + '=' + encodeURIComponent(youtubeId));

  urlEncodedData = urlEncodedPairs.join('&').replace(/%20/g, '+');

  return urlEncodedData;
}

function  setPreloadVideoHandler() {
   // Preload video when user loses focus of Youtube url field
   $('#video_youtube_id').focusout(function() {
	
	var utube_url = $(this).val();

	// Don't preload unless focus is on tag input
        setTimeout(function() {
	  var elem = $(document.activeElement);

	  var elem_id = elem.attr('id');

	  if (elem.attr('id') != 'video_tag_list') {
		  return 0;
	  }
	},1);	

	// Don't preload if empty URL
	if (utube_url.trim() === "") {
		return 0;
	}

	var authToken = '';

        var $form = $(this).parent();

        authToken = getAuthToken($form);

        var postUrl = "<%= Rails.application.routes.url_helpers.preload_video_path %>";

        // Make request to preload video into viewer
        // dataType is actually what is the expected response
        // contentType refers to what is in data
        $.ajax({
          type: 'post',
          dataType:'script',
          data: encodeYoutubeVideoId(authToken, utube_url),
          contentType: 'application/x-www-form-urlencoded;; charset=utf-8',
          url: postUrl
          })
   });
}

function  setClearTagSearchHandler() {
   // enable/disable tag clear search button
   // Chrome won't submit form if button is disabled directly
   $('body').on('submit','form',function() {

       var formId = $(this).attr('id');

       switch (formId) {
       case 'tag-search-form':
          $('#clear-submit').prop('disabled', false);
	  break;
       case 'clear-submit-form':
         $('form#clear-submit').prop('disabled', true);
	 break;
       case 'new_video':
	 $('#error_explanation').remove();
	 break;
       }
   }); 
}

function setTagAutocompleteHandler() {
  $('#tags_name').focus(function() {
    // minLength is set to 1 so a disabled person does not have to type alot
    // set delay to throttle fast users 
    $('#tags_name')
      .autocomplete({
      source: '<%= Rails.application.routes.url_helpers.tags_path %>', 
      autoFocus: true,
      minLength: 1,
      delay: 600
    }); 
  });
}

function setParentmodeRadioHandler() {
   $('#pm-radio-container input:radio').click(function() {
      var elemId = $(this).attr('id');

      switch (elemId) {
      case 'pm_method_PIN':
         $('#parentmode_pin').prop('disabled', false);
         $('#parentmode_pin').focus();
	 $('#parentmode_password').prop('disabled', true);
      break;
      case 'pm_method_Password':
         $('#parentmode_pin').prop('disabled', true);
	 $('#parentmode_password').prop('disabled', false);
	 $('#parentmode_password').focus();
      break;
      }
   });
}

function setSettingsSubmitHandler() {
  $('#profile-settings').submit(function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();

    var userId = $('#user_id').val();
    var dataString = $(this).serializeJSON();

    var putUrl = "<%= Rails.application.routes.url_helpers.settings_path %>" + '/' + userId;

    $.ajax({
      type: 'PUT',
      url: putUrl,
      data: dataString,
      contentType: 'application/json;; charset=utf-8'
    });

  });
}

function ready() {

   setClearTagSearchHandler();

   setPreloadVideoHandler();

   setTagAutocompleteHandler();

   setParentmodeRadioHandler();

   setSettingsSubmitHandler();

}

// Because turbo-links, solution for Rails 5
// Otherwise setParentmodeRadioHandler won't work
$(document).ready(ready);
$(document).on('turbolinks:load', ready);
